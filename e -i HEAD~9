[33mcommit 77453915dc33f6ecdf0dfa5362f85b804a722704[m
Author: Rio Anggara <rioanggaraclub@gmail.com>
Date:   Fri Jan 3 14:05:32 2025 +0700

    w

[1mdiff --git a/index.html b/index.html[m
[1mindex 7c211ac..d0c1067 100644[m
[1m--- a/index.html[m
[1m+++ b/index.html[m
[36m@@ -1225,11 +1225,10 @@[m
         import { RIO_SYSTEM_CONTENT } from './rio-content.js';[m
         [m
         const API_URL = "https://api.openai.com/v1/chat/completions";[m
[31m-        const API_KEY = process.env.OPENAI_API_KEY;  // Load from environment variable[m
 [m
         async function query(userMessage) {[m
             try {[m
[31m-                const response = await fetch('/.netlify/functions/chat', {[m
[32m+[m[32m                const response = await fetch('/api/chat', {[m
                     method: "POST",[m
                     headers: {[m
                         "Content-Type": "application/json"[m

[33mcommit b904847214ff0f86494b992e1e6181e5dc0e3378[m
Author: Rio Anggara <rioanggaraclub@gmail.com>
Date:   Fri Jan 3 13:56:57 2025 +0700

    last... for today...

[1mdiff --git a/netlify/functions/chat.js b/netlify/functions/chat.js[m
[1mnew file mode 100644[m
[1mindex 0000000..6050eee[m
[1m--- /dev/null[m
[1m+++ b/netlify/functions/chat.js[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32mconst { Configuration, OpenAIApi } = require('openai');[m
[32m+[m
[32m+[m[32mconst configuration = new Configuration({[m
[32m+[m[32m    apiKey: process.env.OPENAI_API_KEY,[m
[32m+[m[32m});[m
[32m+[m[32mconst openai = new OpenAIApi(configuration);[m
[32m+[m
[32m+[m[32mexports.handler = async function(event, context) {[m
[32m+[m[32m    if (event.httpMethod !== 'POST') {[m
[32m+[m[32m        return {[m
[32m+[m[32m            statusCode: 405,[m
[32m+[m[32m            body: JSON.stringify({ error: 'Method Not Allowed' })[m
[32m+[m[32m        };[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    try {[m
[32m+[m[32m        const { message } = JSON.parse(event.body);[m
[32m+[m[41m        [m
[32m+[m[32m        const completion = await openai.createChatCompletion({[m
[32m+[m[32m            model: "gpt-3.5-turbo",[m
[32m+[m[32m            messages: [[m
[32m+[m[32m                {[m
[32m+[m[32m                    role: "system",[m
[32m+[m[32m                    content: "You are Rio Anggara AI, an AI assistant that helps answer questions about Rio Anggara's background, experience, and achievements."[m
[32m+[m[32m                },[m
[32m+[m[32m                {[m
[32m+[m[32m                    role: "user",[m
[32m+[m[32m                    content: message[m
[32m+[m[32m                }[m
[32m+[m[32m            ],[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        return {[m
[32m+[m[32m            statusCode: 200,[m
[32m+[m[32m            body: JSON.stringify({[m
[32m+[m[32m                message: completion.data.choices[0].message.content[m
[32m+[m[32m            })[m
[32m+[m[32m        };[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m        console.error('Error:', error);[m
[32m+[m[32m        return {[m
[32m+[m[32m            statusCode: 500,[m
[32m+[m[32m            body: JSON.stringify({ error: 'Failed to process request' })[m
[32m+[m[32m        };[m
[32m+[m[32m    }[m
[32m+[m[32m};[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/node_modules/openai/README.md b/node_modules/openai/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..b03bcd8[m
[1m--- /dev/null[m
[1m+++ b/node_modules/openai/README.md[m
[36m@@ -0,0 +1,673 @@[m
[32m+[m[32m# OpenAI TypeScript and JavaScript API Library[m
[32m+[m
[32m+[m[32m[![NPM version](https://img.shields.io/npm/v/openai.svg)](https://npmjs.org/package/openai) ![npm bundle size](https://img.shields.io/bundlephobia/minzip/openai) [![JSR Version](https://jsr.io/badges/@openai/openai)](https://jsr.io/@openai/openai)[m
[32m+[m
[32m+[m[32mThis library provides convenient access to the OpenAI REST API from TypeScript or JavaScript.[m
[32m+[m
[32m+[m[32mIt is generated from our [OpenAPI specification](https://github.com/openai/openai-openapi) with [Stainless](https://stainlessapi.com/).[m
[32m+[m
[32m+[m[32mTo learn how to use the OpenAI API, check out our [API Reference](https://platform.openai.com/docs/api-reference) and [Documentation](https://platform.openai.com/docs).[m
[32m+[m
[32m+[m[32m## Installation[m
[32m+[m
[32m+[m[32m```sh[m
[32m+[m[32mnpm install openai[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Installation from JSR[m
[32m+[m
[32m+[m[32m```sh[m
[32m+[m[32mdeno add jsr:@openai/openai[m
[32m+[m[32mnpx jsr add @openai/openai[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThese commands will make the module importable from the `@openai/openai` scope:[m
[32m+[m
[32m+[m[32mYou can also [import directly from JSR](https://jsr.io/docs/using-packages#importing-with-jsr-specifiers) without an install step if you're using the Deno JavaScript runtime:[m
[32m+[m
[32m+[m[32m```ts[m
[32m+[m[32mimport OpenAI from 'jsr:@openai/openai';[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Usage[m
[32m+[m
[32m+[m[32mThe full API of this library can be found in [api.md file](api.md) along with many [code examples](https://github.com/openai/openai-node/tree/master/examples). The code below shows how to get started using the chat completions API.[m
[32m+[m
[32m+[m[32m<!-- prettier-ignore -->[m
[32m+[m[32m```js[m
[32m+[m[32mimport OpenAI from 'openai';[m
[32m+[m
[32m+[m[32mconst client = new OpenAI({[m
[32m+[m[32m  apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32masync function main() {[m
[32m+[m[32m  const chatCompletion = await client.chat.completions.create({[m
[32m+[m[32m    messages: [{ role: 'user', content: 'Say this is a test' }],[m
[32m+[m[32m    model: 'gpt-4o',[m
[32m+[m[32m  });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mmain();[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Streaming responses[m
[32m+[m
[32m+[m[32mWe provide support for streaming responses using Server Sent Events (SSE).[m
[32m+[m
[32m+[m[32m```ts[m
[32m+[m[32mimport OpenAI from 'openai';[m
[32m+[m
[32m+[m[32mconst client = new OpenAI();[m
[32m+[m
[32m+[m[32masync function main() {[m
[32m+[m[32m  const stream = await client.chat.completions.create({[m
[32m+[m[32m    model: 'gpt-4o',[m
[32m+[m[32m    messages: [{ role: 'user', content: 'Say this is a test' }],[m
[32m+[m[32m    stream: true,[m
[32m+[m[32m  });[m
[32m+[m[32m  for await (const chunk of stream) {[m
[32m+[m[32m    process.stdout.write(chunk.choices[0]?.delta?.content || '');[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mmain();[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mIf you need to cancel a stream, you can `break` from the loop[m
[32m+[m[32mor call `stream.controller.abort()`.[m
[32m+[m
[32m+[m[32m### Request & Response types[m
[32m+[m
[32m+[m[32mThis library includes TypeScript definitions for all request params and response fields. You may import and use them like so:[m
[32m+[m
[32m+[m[32m<!-- prettier-ignore -->[m
[32m+[m[32m```ts[m
[32m+[m[32mimport OpenAI from 'openai';[m
[32m+[m
[32m+[m[32mconst client = new OpenAI({[m
[32m+[m[32m  apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32masync function main() {[m
[32m+[m[32m  const params: OpenAI.Chat.ChatCompletionCreateParams = {[m
[32m+[m[32m    messages: [{ role: 'user', content: 'Say this is a test' }],[m
[32m+[m[32m    model: 'gpt-4o',[m
[32m+[m[32m  };[m
[32m+[m[32m  const chatCompletion: OpenAI.Chat.ChatCompletion = await client.chat.completions.create(params);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mmain();[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mDocumentation for each method, reques